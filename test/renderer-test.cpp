#include "catch.hpp"
#include "renderer.hpp"
#include "triangle.hpp"
#include "vertex.hpp"

TEST_CASE("fillTriangle works on single triangle (const z)", "[renderer]") {
  int solution[] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,
0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  };

  int size = 20;
  Renderer r (size, size);
  Vertex v1(12, 2, 1);
  Vertex v2(5, 16, 1);
  Vertex v3(16, 10, 1);
  Triangle t(v1, v2, v3);
  r.fillTriangle(t);

  for(int j=0; j<size; ++j) {
    for(int i=0; i<size; ++i) {
      REQUIRE(r.getZ(i, j) == solution[j*size+i]);
    }
  }
}

TEST_CASE("fillTriangle works on single triangle (varying z)", "[renderer]") {
  real solution[] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1.14286,1.125,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1.28571,1.26786,1.25,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1.42857,1.41071,1.39286,1.375,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,1.57143,1.55357,1.53571,1.51786,1.5,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1.71429,1.69643,1.67857,1.66071,1.64286,1.625,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1.85714,1.83929,1.82143,1.80357,1.78571,1.76786,1.75,0,0,0,0,
0,0,0,0,0,0,0,0,2,1.98214,1.96429,1.94643,1.92857,1.91071,1.89286,1.875,0,0,0,0,
0,0,0,0,0,0,0,0,2.14286,2.125,2.10714,2.08929,2.07143,2.05357,2.03571,2.01786,2,0,0,0,
0,0,0,0,0,0,0,2.83631,2.81845,2.8006,2.78274,2.76488,2.74702,2.72917,2.71131,0,0,0,0,0,
0,0,0,0,0,0,0,2.86905,2.85119,2.83333,2.81548,2.79762,2.77976,0,0,0,0,0,0,0,
0,0,0,0,0,0,2.90179,2.88393,2.86607,2.84821,2.83036,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2.93452,2.91667,2.89881,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,2.96726,2.9494,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  };

  int size = 20;
  Renderer r (size, size);
  Vertex v1(12, 2, 1);
  Vertex v2(5, 16, 3);
  Vertex v3(16, 10, 2);
  Triangle t(v1, v2, v3);
  r.fillTriangle(t);

  for(int j=0; j<size; ++j) {
    for(int i=0; i<size; ++i) {
      REQUIRE(r.getZ(i, j) == Approx(solution[j*size+i]));
    }
  }
}

TEST_CASE("fillTriangle works on two triangles", "[renderer]") {
  real solution[] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,0,0,0,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,0,0,1,1,1,1,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,2,0,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,
0,0,0,0,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,
0,0,0,0,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,
0,0,0,0,0,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,2,2,2,2,2,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,2,2,2,2,2,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,2,2,2,2,0,0,0,0,0,0,
0,0,0,0,0,1,1,0,0,0,0,2,2,2,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  };

  int size = 20;
  Renderer r (size, size);
  Vertex v1(12, 2, 1);
  Vertex v2(5, 16, 1);
  Vertex v3(16, 10, 1);
  Triangle t1(v1, v2, v3);
  r.fillTriangle(t1);

  Vertex w1(7, 4, 2);
  Vertex w2(4, 10, 2);
  Vertex w3(16, 18, 2);
  Triangle t2(w1, w2, w3);
  r.fillTriangle(t2);

  for(int j=0; j<size; ++j) {
    for(int i=0; i<size; ++i) {
      REQUIRE(r.getZ(i, j) == Approx(solution[j*size+i]));
    }
  }
}
